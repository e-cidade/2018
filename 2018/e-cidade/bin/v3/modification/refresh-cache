#!/usr/bin/env php
<?php

use \ECidade\V3\Extension\Glob;
use \ECidade\V3\Extension\ConsoleColor as Color;

ini_set('memory_limit', '-1');

require_once( dirname(dirname(dirname(__DIR__))) . "/bootstrap.php" );

$filesLegacy = Glob::find(ECIDADE_PATH . "modification/cache/" . "*.*", null, true);

$current_mtime = time();
$old_mtime = $current_mtime - 3600;

remove_directory(ECIDADE_MODIFICATION_DATA_PATH . "file/sync/");

// legacy modifications
foreach ($filesLegacy as $file) {

  $rel = str_replace(ECIDADE_PATH . "modification/cache/", "", $file);
  $rel = str_replace("-", "/", $rel);

  if (file_exists($rel)) {

    touch($rel, $current_mtime);

    echo Color::set("TOUCH: ", "light_blue") . Color::set($rel . "\n", "white");
    $finalPath = ECIDADE_MODIFICATION_CACHE_PATH . "global/" . $rel;

    if (file_exists($finalPath)) {
      touch($finalPath, $old_mtime);
      touch_sync_path($finalPath, $old_mtime);
    }
  }

}

// EXTENSION

$filesExtensionGlobal = Glob::find("*.*", ECIDADE_MODIFICATION_CACHE_PATH . "global/", true);


// global
foreach ($filesExtensionGlobal as $file) {

  try {

    touch(str_replace(ECIDADE_MODIFICATION_CACHE_PATH ."global/", "", $file), $current_mtime);
    touch($file, $old_mtime);
    touch_sync_path($file, $old_mtime);

    echo Color::set("TOUCH: ", "light_blue");
    echo Color::set(str_replace(ECIDADE_MODIFICATION_CACHE_PATH ."global/", "", $file), "white") . "\n";

  } catch (Exception $error) {
    echo Color::set(" - SKIP: ", "yellow") . Color::set($file, "white") . "\n";
  }
}


// users

$filesExtensionUsers = Glob::find("*.*", ECIDADE_MODIFICATION_CACHE_PATH . "user/", true);

foreach ($filesExtensionUsers as $file) {

  try {

    $rel = str_replace(ECIDADE_MODIFICATION_CACHE_PATH ."user/", "", $file);
    $rel = explode("/", $rel);
    array_shift($rel);
    $rel = implode("/", $rel);

    touch($rel, $current_mtime);
    touch($file, $old_mtime);
    touch_sync_path($file, $old_mtime);

    echo Color::set("TOUCH: ", "light_blue") . Color::set("$rel\n", "white");
  } catch (Exception $error) {
    echo Color::set(" - SKIP: ", "yellow") . Color::set($file, "white") . "\n";
  }
}

function notify_error($message) {
  echo Color::set(" - SKIP: ", "yellow") . Color::set($message, "white") . "\n";
}

function touch_sync_path($path, $mtime) {

  $syncPath = ECIDADE_MODIFICATION_DATA_PATH . "file/sync/";
  $path = str_replace(ECIDADE_MODIFICATION_CACHE_PATH, $syncPath, $path);
  $dir = dirname($path);

  if (!is_dir($dir) && !mkdir($dir, 0775, true)) {
    return notify_error("Erro ao criar diretorio: $dir");
  }

  if (!touch($path, $mtime)) {
    notify_error("Erro ao alterar data de modificação do arquivo: $path");
  }

  return true;
}

function remove_directory($path) {

  try {

    if (!is_dir($path)) {
      return true;
    }

    $directoryIterator = new RecursiveDirectoryIterator($path, RecursiveDirectoryIterator::SKIP_DOTS);
    $files = new RecursiveIteratorIterator($directoryIterator, RecursiveIteratorIterator::CHILD_FIRST);

    foreach ($files as $fileinfo) {
      $todo = ($fileinfo->isDir() ? 'rmdir' : 'unlink');
      $todo($fileinfo->getRealPath());
    }

    return rmdir($path);

  } catch (Exception $e) {
    return false;
  }
}

exit(0);
