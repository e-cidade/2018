<?php
/*
 *     E-cidade Software Publico para Gestao Municipal                
 *  Copyright (C) 2012  DBselller Servicos de Informatica             
 *                            www.dbseller.com.br                     
 *                         e-cidade@dbseller.com.br                   
 *                                                                    
 *  Este programa e software livre; voce pode redistribui-lo e/ou     
 *  modifica-lo sob os termos da Licenca Publica Geral GNU, conforme  
 *  publicada pela Free Software Foundation; tanto a versao 2 da      
 *  Licenca como (a seu criterio) qualquer versao mais nova.          
 *                                                                    
 *  Este programa e distribuido na expectativa de ser util, mas SEM   
 *  QUALQUER GARANTIA; sem mesmo a garantia implicita de              
 *  COMERCIALIZACAO ou de ADEQUACAO A QUALQUER PROPOSITO EM           
 *  PARTICULAR. Consulte a Licenca Publica Geral GNU para obter mais  
 *  detalhes.                                                         
 *                                                                    
 *  Voce deve ter recebido uma copia da Licenca Publica Geral GNU     
 *  junto com este programa; se nao, escreva para a Free Software     
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA          
 *  02111-1307, USA.                                                  
 *  
 *  Copia da licenca no diretorio licenca/licenca_en.txt 
 *                                licenca/licenca_pt.txt 
 */


/** AgataPgsql
 *  Agata Driver for PostgreSQL
 */
class AgataPgsql
{
    /** Function Connect
     *  Connects to a Database
     */
    function Connect($host, $database, $user, $pass)
    {
        $protocol = 'tcp';
        //port
        if (strpos($host, ':'))
        {
            $pieces = explode(':', $host);
            $host = trim($pieces[0]);
            $port = trim($pieces[1]);
            $connstr = ' port=' . $port;
        }
        if ($host)
        {
            $connstr .= ' host=' . $host;
        }
        if (isset($database))
        {
            $connstr .= ' dbname=' . $database;
        }
        if (!empty($user))
        {
            $connstr .= ' user=' . $user;
        }
        if (!empty($pass))
        {
            $connstr .= ' password=' . $pass;
        }

        if (OS == 'LIN')
        {
            $connstr .= ' connect_timeout=5';
        }
        ob_start();
        $conn = pg_connect($connstr);
        $error = ob_get_contents();
        ob_end_clean();
        if ($conn == false)
        {
            return new AgataError($error);
        }
        pg_query($conn, "SELECT fc_startsession();");
        
        require_once("libs/db_libsession.php");
        db_savesession($conn, $_SESSION);        
        
        $this->connection = $conn;
        return true;
    }

    /** Function Disconnect
     *  Disconnects a Database
     */
    function Disconnect()
    {
        $ret = @pg_close($this->connection);
        $this->connection = null;
        return $ret;
    }

    /** Function Query
     *  Run a Query
     */
    function Query($query)
    {
        $this->row = 0;
        $result = pg_query($this->connection, $query);
        if (!$result) {
            return $this->RaiseError();
        }
        return $result;
    }

    /** Function FetchRow
     *  Fetch a Row and returns as an array.
     */
    function FetchRow($result)
    {
        //echo "fetch {$this->row}\n";
        pg_result_seek($result, $this->row);
        $this->row ++;
        // aqui alterou de pg_fetch_row para
        return pg_fetch_array($result);
    }

    /** Function FreeResult
     *  Free the Database result
     */
    function FreeResult($result)
    {
        if (is_resource($result))
        {
            return @pg_freeresult($result);
        }
        return true;
    }

    /** Function NumCols
     *  Returns the number of columns of a query
     */
    function NumCols($result)
    {
        $cols = @pg_numfields($result);
        if (!$cols) {
            return $this->RaiseError();
        }
        return $cols;
    }

    /** Function NumRows
     *  Returns the number of rows of a query
     */
    function NumRows($result)
    {
        $rows = @pg_numrows($result);
        if ($rows === null) {
            return $this->RaiseError();
        }
        return $rows;
    }

    /** Function RaiseError
     *  Returns an AgataError Object
     */
    function RaiseError()
    {
        return new AgataError(pg_errormessage($this->connection));
    }

    /** Function Properties
     *  Returns the Query Information
     */
    function Properties($result)
    {
        $id = $result;
        if (empty($id))
        {
            return $this->RaiseError();
        }

        $count = @pg_numfields($id);

        for ($i=0; $i<$count; $i++)
        {
            $res[$i]['name']  = @pg_fieldname ($id, $i);
            $res[$i]['type']  = @pg_fieldtype ($id, $i);
            $res[$i]['len']   = @pg_fieldsize ($id, $i);
        }
        return $res;
    }
}
?>