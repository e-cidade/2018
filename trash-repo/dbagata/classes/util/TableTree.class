<?php
/*
 *     E-cidade Software Publico para Gestao Municipal                
 *  Copyright (C) 2009  DBselller Servicos de Informatica             
 *                            www.dbseller.com.br                     
 *                         e-cidade@dbseller.com.br                   
 *                                                                    
 *  Este programa e software livre; voce pode redistribui-lo e/ou     
 *  modifica-lo sob os termos da Licenca Publica Geral GNU, conforme  
 *  publicada pela Free Software Foundation; tanto a versao 2 da      
 *  Licenca como (a seu criterio) qualquer versao mais nova.          
 *                                                                    
 *  Este programa e distribuido na expectativa de ser util, mas SEM   
 *  QUALQUER GARANTIA; sem mesmo a garantia implicita de              
 *  COMERCIALIZACAO ou de ADEQUACAO A QUALQUER PROPOSITO EM           
 *  PARTICULAR. Consulte a Licenca Publica Geral GNU para obter mais  
 *  detalhes.                                                         
 *                                                                    
 *  Voce deve ter recebido uma copia da Licenca Publica Geral GNU     
 *  junto com este programa; se nao, escreva para a Free Software     
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA          
 *  02111-1307, USA.                                                  
 *  
 *  Copia da licenca no diretorio licenca/licenca_en.txt 
 *                                licenca/licenca_pt.txt 
 */

/***********************************************************/
/* Database Tree
/* by Pablo Dall'Oglio 2001-2006
/***********************************************************/
class TableTree extends GtkCTree
{
    /***********************************************************/
    /* Constructor Method
    /***********************************************************/
    function TableTree($Title, $nick)
    {
        GtkCTree::GtkCTree(1, 0, array($Title));
        GtkCTree::set_selection_mode(GTK_SELECTION_SINGLE);
        GtkCTree::set_line_style(GTK_CTREE_LINES_SOLID);
        $this->handler = GtkCTree::connect_object('tree-select-row', array(&$this, 'Abrir'));
        
        $this->BotaoOk = new GtkButton;
        $this->nick = $nick;
        $this->opened = null;
    }

    /***********************************************************/
    /* Load specific tables
    /***********************************************************/
    function LoadTheseTables($DbAttributes, $Tables, $DataDescription)
    {
        global $Pixmaps;

        $pixmap = $Pixmaps['table'];
        $this->DbAttributes = $DbAttributes;
        $this->agataDataDescription = $DataDescription;
        if ($this->handler)
        {
            GtkCTree::disconnect($this->handler);
            $this->handler = null;
        }
        
        foreach ($Tables as $Table)
        {
            $Table = trim($Table);
            $index = "table:$Table";
            if (!$this->Tables[$Table])
            {
                $this->Tables[$Table] = true;
                
                if ($this->nick)
                {
                    $text = ($this->SeekDataDescription($index)) ? array($this->SeekDataDescription($index)) : array($Table);
                }
                else
                {
                    $text = array($Table);
                }

                $table = GtkCtree::insert_node(null, null, $text, 5,
                $pixmap[0], $pixmap[1], $pixmap[0], $pixmap[1], false, false);
                
                GtkCtree::node_set_row_data($table, $index);
                $this->LoadFields($index, $table);
            }
        }
    }

    /***********************************************************/
    /* Load all the Database tables
    /***********************************************************/
    function LoadTables($DbAttributes, $DataDescription)
    {
        global $Pixmaps;
        $this->ClearTree();
        $this->agataDataDescription = $DataDescription;
        $this->DbAttributes    = $DbAttributes;
        
        $pixmap = $Pixmaps['table'];
        $conn   = new AgataConnection;
        
        $Pass   = $conn->Open($this->DbAttributes);
        if (!$Pass)
        {
            $conn->Close();
            return false;
        }
        
        $Tables = $conn->LoadTables();
        $conn->Close();
        
        foreach ($Tables as $Table)
        {
            $index = "table:$Table";
            if ($this->nick)
            {
                $text = ($this->SeekDataDescription($index)) ? $this->SeekDataDescription($index) : $Table;
            }
            else
            {
                $text = $Table;
            }
            
            $Tablesok[$index] = $text;
        }
        asort ($Tablesok);
        
        foreach ($Tablesok as $index => $text)
        {
            $table = GtkCtree::insert_node(null, null, array($text), 5,
            $pixmap[0], $pixmap[1], $pixmap[0], $pixmap[1], false, false);
            
            GtkCtree::node_set_row_data($table, $index);
        }
    }

    /***********************************************************/
    /* Clear the tree
    /***********************************************************/
    function ClearTree()
    {
        GtkCtree::clear();
        $this->opened = null;
        $this->Tables = null;
    }

    /***********************************************************/
    /* Returns the information about the current node
    /***********************************************************/
    function GetInfo()
    {
        $selection = $this->selection;
        
        if ($selection)
        {
            $text = GtkCTree::node_get_row_data($selection[0]);
            return $text;
        }
        return false;
    }

    /***********************************************************/
    /* Expand the current node
    /***********************************************************/
    function ExpandCurrent()
    {
        $selecao = $this->selection[0];
        GtkCTree::expand($selecao);
    }

    /***********************************************************/
    /* Removes the current node
    /***********************************************************/
    function RemoveCurrent()
    {
        $selecao = $this->selection[0];
        $text = GtkCTree::node_get_row_data($selecao);
        $pieces = explode(':', $text);
        $table = $pieces[1];
        $this->Tables[$table] = false;
        GtkCTree::remove_node($selecao);
    }

    /***********************************************************/
    /* Opens the current node
    /***********************************************************/
    function Abrir()
    {
        $selecao = $this->selection[0];
        $index = GtkCTree::node_get_row_data($selecao);
        $pieces = explode(':', $index);
        $is_table = (count($pieces) == 2);
        
        if ($is_table && (!$this->opened[$index]))
        {
            $this->opened[$index] = true;
            if ($this->LoadFields($index, $selecao))
            {
                GtkCTree::expand($selecao);
            }
        }
        elseif ($is_table && ($this->opened[$index]))
        {
            GtkCTree::expand($selecao);
        }
        else
        {
            $botao = $this->BotaoOk;
            $botao->clicked();
        }
    }

    /***********************************************************/
    /* Load all the fields of a table
    /***********************************************************/
    function LoadFields($index, &$NodoRaiz)
    {
        global $Pixmaps;

        $tmp = explode(':', $index);
        $Table = $tmp[1];
        $pixmap = $Pixmaps['field'];
        $conn = new AgataConnection;
        $Pass = $conn->Open($this->DbAttributes);
        
        $Fields = $conn->LoadFields($Table);
        if (!$Fields)
        {
            $conn->Close();
            //new Dialog($Table . ': ' . _a('This table does not belong to this database'));
            $info = GtkCtree::node_get_pixtext($NodoRaiz,0);
            GtkCtree::node_set_pixtext($NodoRaiz,0, $info[0].' <'._a('not found').'>', $info[1], $info[2], $info[3]);
            return;
        }
        $conn->Close();
        if ($Fields)
        {
            foreach ($Fields as $Field)
            {
                if (trim($Field))
                {
                    $index = "table:$Table:field:$Field";
                    if ($this->nick)
                    {
                        $nodetext = ($this->SeekDataDescription($index)) ? array($this->SeekDataDescription($index)) : array($Field);
                    }
                    else
                    {
                        $nodetext = array($Field);
                    }
                    
                    $field = GtkCtree::insert_node($NodoRaiz, null, $nodetext, 5, $pixmap[0], $pixmap[1], $pixmap[0], $pixmap[1], false, false);
                    GtkCTree::node_set_row_data($field, $index);
                    
                }
            }
            return true;
        }
    }

    function SeekDataDescription($index)
    {
        if ($this->agataDataDescription[$index])
        {
            return $this->agataDataDescription[$index];
        }
        else
        {
            $pieces = explode(':', $index);
            if (count($pieces) == 2)
            {
                $upper = $this->agataDataDescription[$pieces[0] . ':' . strtoupper($pieces[1])];
                $lower = $this->agataDataDescription[$pieces[0] . ':' . strtolower($pieces[1])];
                
                return ($upper ? $upper : $lower);
            }
            else
            {
                $upper = $this->agataDataDescription[$pieces[0] . ':' . strtoupper($pieces[1]) . ':' . $pieces[2] . ':' . strtoupper($pieces[3])];
                $lower = $this->agataDataDescription[$pieces[0] . ':' . strtolower($pieces[1]) . ':' . $pieces[2] . ':' . strtolower($pieces[3])];
                
                return ($upper ? $upper : $lower);
            }
        }
    }
}
?>