<?php
/*
 *     E-cidade Software Publico para Gestao Municipal                
 *  Copyright (C) 2012  DBselller Servicos de Informatica             
 *                            www.dbseller.com.br                     
 *                         e-cidade@dbseller.com.br                   
 *                                                                    
 *  Este programa e software livre; voce pode redistribui-lo e/ou     
 *  modifica-lo sob os termos da Licenca Publica Geral GNU, conforme  
 *  publicada pela Free Software Foundation; tanto a versao 2 da      
 *  Licenca como (a seu criterio) qualquer versao mais nova.          
 *                                                                    
 *  Este programa e distribuido na expectativa de ser util, mas SEM   
 *  QUALQUER GARANTIA; sem mesmo a garantia implicita de              
 *  COMERCIALIZACAO ou de ADEQUACAO A QUALQUER PROPOSITO EM           
 *  PARTICULAR. Consulte a Licenca Publica Geral GNU para obter mais  
 *  detalhes.                                                         
 *                                                                    
 *  Voce deve ter recebido uma copia da Licenca Publica Geral GNU     
 *  junto com este programa; se nao, escreva para a Free Software     
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA          
 *  02111-1307, USA.                                                  
 *  
 *  Copia da licenca no diretorio licenca/licenca_en.txt 
 *                                licenca/licenca_pt.txt 
 */

/* AgataQuery
 *
 */
class AgataQuery
{
    /***********************************************************/
    /* Constructor method
    /***********************************************************/
    function AgataQuery($agataConfig)
    {
        $this->agataConfig = $agataConfig;
    }

    /***********************************************************/
    /* Open a query
    /***********************************************************/
    function Open($sql)
    {
        $this->result  = $this->db->Query($sql);
        $this->records = 0;
        $this->Properties = null;
        
        if (is_agata_error($this->result))
        {
            $a = new MemoArea($this->result->GetError());
            $this->result =0;
            return false;
        }
        
        return true;
    }

    /***********************************************************/
    /* Get the number of rows
    /***********************************************************/
    function GetRowCount()
    {
        $ret = $this->db->NumRows($this->result);
        return $ret;
    }

    /***********************************************************/
    /* Get the number of columns
    /***********************************************************/
    function GetColumnCount()
    {
        $ret = $this->db->NumCols($this->result);
        return $ret;
    }

    function reset()
    {
        $this->db->row = 0;
        $this->records = 0;
    }
    
    /***********************************************************/
    /* Fetch Results
    /***********************************************************/
    function Fetch()
    {
        $this->records ++;
        $row = $this->db->FetchRow($this->result);
        if ($this->records > $this->OffSet)
        {
            if (($this->records <= ($this->Limit + $this->OffSet)) or ($this->Limit == 0))
            {
                return $row;
            }
            else
            {
                return null;
            }
        }
        else
        {
            return $this->Fetch();
        }
    }

    /***********************************************************/
    /* Set the OffSet
    /***********************************************************/
    function setOffSet($offset)
    {
        $this->OffSet = $offset;
    }

    /***********************************************************/
    /* Set the Limit
    /***********************************************************/
    function setLimit($limit)
    {
        $this->Limit = $limit;
    }

    /***********************************************************/
    /* Get the names of columns
    /***********************************************************/
    function GetColumnNames()
    {
        if (!$this->Properties)
        {
            $this->Properties = $this->db->Properties($this->result);
        }
        
        $Results = $this->Properties;
        foreach ($Results as $Result)
        {
            if ($Result['name']!= null)
            {
                $strings[] = $Result['name'];
            }
        }
        return $strings;
    }

    /***********************************************************/
    /* Get the types of columns
    /***********************************************************/
    function GetColumnTypes()
    {
        if (!$this->Properties)
        {
            $this->Properties = $this->db->Properties($this->result);
        }
        $Results = $this->Properties;
        foreach ($Results as $Result)
        {
            $strings[] = $Result['type'];
        }
        return $strings;
    }
}
?>